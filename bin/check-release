#!/usr/bin/env bash

set -euo pipefail

log::header() {
	echo '=>' "$@" 1>&2
}

log::indicator() {
	echo '->' "$@" 1>&2
}

log::debug() {
	if tput colors &>/dev/null; then
		# XXX: Light gray color
		echo -e "\033[1;30m-> $*\033[0m" 1>&2
	else
		echo '->' "$@" 1>&2
	fi
}

log::error() {
	if tput colors &>/dev/null; then
		# XXX: Red
		echo -e "\033[31mERROR: $*\033[0m" 1>&2
	else
		echo "ERROR:" "$@" 1>&2
	fi
}

log::warn() {
	if tput colors &>/dev/null; then
		# XXX: bright yellow
		echo -e "\033[1;33m-> $*\033[0m" 1>&2
	else
		echo "->" "$@" 1>&2
	fi
}

log::success() {
	if tput colors &>/dev/null; then
		# XXX: green
		echo -e "\033[32m-> $*\033[0m" 1>&2
	else
		echo "->" "$@" 1>&2
	fi
}

log::exec_command() {
	log::debug '$' "$@"
	"$@"
}

main() {
	local scratch scratch_dir environment="${1:-}" policy_path="${POLICY_PATH:-}"

	if [ -z "${environment}" ]; then
		log::error "USAGE: ${0} ENVIRONMENT [POLICY_PATH]"
		return 1
	fi

	if [ -n "${2:-}" ]; then
		policy_path="${2}"
	fi

	if [ ! -d "${policy_path}" ]; then
		log::error "No such directory: ${policy_path}"
		return 1
	fi

	log::header "Checking ${environment} release"

	log::indicator "Checking directory structure"

	if [ ! -d "chart" ]; then
		log::error "Chart directory not found"
		return 1
	fi

	if [ ! -f "deploy/test/values.yaml" ]; then
		log::error "dpeloy/test/values.yaml not found"
		return 1
	fi

	local -a helm_args=()
	local -a manifests=()

	scratch_dir="$(mktemp -d)"
	scratch="$(mktemp)"

	helm_args=(helm secrets template chart)
	helm_args+=(--generate-name)
	helm_args+=(--output-dir "${scratch_dir}")
	helm_args+=(-f deploy/test/values.yaml)

	if [ -f "deploy/${environment}/values.yaml" ]; then
		helm_args+=(-f "deploy/${environment}/values.yaml")
	fi

	if [ -f "deploy/${environment}/secrets.yaml" ]; then
		helm_args+=(-f "deploy/${environment}/secrets.yaml")
	fi

	log::indicator "Generating ${environment} release"
	log::exec_command "${helm_args[@]}"

	# XXX: go into the generated templates directory so file names
	# are relative.
	pushd "${scratch_dir}"/*/templates >/dev/null

	log::indicator "Finding mainifests"
	log::exec_command find . -type f \( -iname '*.yml' -o -iname '*.yaml' \) | tee "${scratch}"

	while read -r manifest; do
		manifests+=("${manifest}")
	done <"${scratch}"

	if [ "${#manifests}" -eq 0 ]; then
		log::error "No manifests found"
		return 1
	fi

	log::indicator "Checking basic policies"
	log::exec_command conftest test -p "${POLICY_PATH}/policy" "${manifests[@]}"

	popd >/dev/null
}

main "$@"
